
name: Deploy Backend 

on:
  push:
    branches:
      - master

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # BEST PRACTICE: Use the official Docker action for a secure login.
      - name: Log In to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }} # This MUST be a Docker Hub Access Token

      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/codeveritus-backend:latest .

      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/codeveritus-backend:latest

  deploy:
    name: Deploy to RHEL via Cloudflare Tunnel
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install cloudflared
        run: |
          curl -fsSL https://pkg.cloudflare.com/cloudflare-main.gpg | sudo tee /usr/share/keyrings/cloudflare-main.gpg >/dev/null
          echo 'deb [signed-by=/usr/share/keyrings/cloudflare-main.gpg] https://pkg.cloudflare.com/cloudflared jammy main' | sudo tee /etc/apt/sources.list.d/cloudflared.list
          sudo apt-get update && sudo apt-get install -y cloudflared

      # BEST PRACTICE: Use a dedicated action to handle the SSH key securely.
      - name: Set Up SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          # ssh-passphrase: ${{ secrets.SSH_KEY_PASSPHRASE }} # <-- Uncomment this line ONLY if your key has a passphrase

      - name: Configure SSH for Tunnel
        run: |
          mkdir -p ~/.ssh
          cat <<EOF > ~/.ssh/config
          Host rhel-tunnel
            HostName ${{ secrets.RHEL_HOSTNAME }}
            User root
            ProxyCommand cloudflared access ssh --hostname ${{ secrets.RHEL_HOSTNAME }}
            StrictHostKeyChecking yes
            UserKnownHostsFile /dev/null
          EOF
          # Note: ssh-keyscan is no longer needed because we set StrictHostKeyChecking to 'no' for simplicity in CI/CD.

      - name: Deploy via SSH
        run: |
          ssh rhel-tunnel << 'EOF'
            cd /opt/codeveritus

            echo "🛠️ Pulling latest Docker image for the backend..."
            docker compose pull backend 

            echo "🚀 Recreating frontend container..."
            # This single command handles stopping, removing, and starting the new container.
            docker compose up -d --force-recreate --remove-orphans backend

            echo "🧹 Pruning old, unused backend images..."
            # This safely removes only the old backend image, not affecting other projects.
            docker images --filter "dangling=true" --filter "reference=${{ secrets.DOCKER_USERNAME }}/codeveritus-backend" -q | xargs -r docker rmi

            echo "✅ Deployment complete!"
          EOF
